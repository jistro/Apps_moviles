@startuml
left to right direction
skinparam linetype ortho
' ----------- packages -------------
package SongList{
    AllSongs -> SongModelProvider

AllSongs -> AudioPlayer
AllSongs -> SongModel
AllSongs -> NowPlaying
_AllSongsState -> SongModelProvider
_AllSongsState -> AudioPlayer
_AllSongsState -> SongModel
}

package NowPlaying{
    NowPlaying --> _NowPlayingState
    NowPlaying --> AudioPlayer
    NowPlaying --> SongModel
    NowPlaying --> SongModelProvider
    SongModelProvider --> SongModel
}
' ----- inheritance / usingFor -----
MyApp -> SongList
' ------------ classes -------------

class MyApp {
    - SongModelProvider _songModelProvider
    + MyApp({Key? key})
    + Widget build(BuildContext context)
}

class AllSongs {
    - _audioQuery : OnAudioQuery
    - _audioPlayer : AudioPlayer
    - _FlagIsPlaying : bool
    - allSongs : List<SongModel>

    + AllSongs()
    - requestPermission() : Future<void>
    + build(BuildContext) : Widget
    - _songNowPlayingBar() : Align
    - _iconAlbum(AsyncSnapshot<List<SongModel>>, int) : Container
}

class _AllSongsState {
    - _audioQuery : OnAudioQuery
    - _audioPlayer : AudioPlayer
    - _FlagIsPlaying : bool
    - allSongs : List<SongModel>

    + initState() : void
    + build(BuildContext) : Widget
    - _songNowPlayingBar() : Align
    - _iconAlbum(AsyncSnapshot<List<SongModel>>, int) : Container
}

class SongModel {
    - id : int
    - title : String
    - artist : String
}

class SongModelProvider {
    - _id : int

    + setId(int) : void
    + getId() : int
}

class NowPlaying {
    -_duration: Duration
    -_position: Duration
    -_flagIsPlaying: bool
    -_flagIsLooping: bool
    -_flagIsShuffling: bool
    -songList: List<AudioSource>
    -currentIndex: int
    -indexForSong: int
    -audioPlayer: AudioPlayer
    -songModelList: List<SongModel>
    +NowPlaying(songModelList: List<SongModel>, audioPlayer: AudioPlayer)
    +createState(): _NowPlayingState
    +popBack()
    +seekToSeconds(seconds: int)
    +initState()
    +parseSong()
    +listenToEvent()
    +listenToSongIndex()
    +build(context: BuildContext): Widget
}

class _NowPlayingState {
    +build(context: BuildContext): Widget
}

class AudioPlayer {
    +setAudioSource(source: AudioSource, {initialIndex: int})
    +play()
    +durationStream
    +positionStream
    +playerStateStream
    +currentIndexStream
    +seek(Duration)
}

class SongModelProvider {
    - _id: int
    + id: int
    + setId(id: int): void
    + notifyListeners(): void
}

class SongModel {
    -id: int
    -displayName: String
    -displayNameWOExt: String
    -album: String?
    -uri: String?
    +SongModel({required id, required displayName, required displayNameWOExt, album, uri})
}

class AllSongs {
    +build(context: BuildContext): Widget
}

@enduml